{"version":3,"sources":["components/Start.js","utils/index.js","components/Question.js","components/End.js","App.js","reportWebVitals.js","index.js"],"names":["Start","onQuizStart","className","onClick","formatTime","time","Math","floor","Question","data","onAnswerUpdate","numberOfQuestions","activeQuestion","onSetActiveQuestion","onSetStep","useState","selected","setSelected","error","setError","radiosWrapper","useRef","useEffect","findCheckedInput","current","querySelector","checked","changeHandler","e","target","value","question","ref","choices","map","choice","i","type","name","onChange","prevState","q","a","End","results","onReset","onAnswersCheck","correctAnswers","setCorrectAnswers","correct","forEach","result","index","answer","length","App","interval","step","setStep","setActiveQuestion","answers","setAnswers","setShowModal","setTime","clearInterval","setInterval","prevTime","quizData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a21470ac.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Start = ({ onQuizStart }) =>{\r\n    return(\r\n        <>\r\n        <div className=\"Home-container\">\r\n            <h1>Welcome</h1>\r\n            <p>start quize</p>\r\n            <button className=\"Home-btn\" onClick={ onQuizStart }>Start</button>\r\n        </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Start;","  \r\nconst formatTime = time => {\r\n    if(time < 60) {\r\n      return time < 10 ? `0${time}s` : `${time}s`;\r\n    }else {\r\n      return Math.floor(time / 60) + 'm' + (time % 60) + 's';\r\n    }\r\n  }\r\n  \r\n  export {\r\n    formatTime\r\n  }","import React, { useState, useEffect, useRef } from 'react';\r\nimport { formatTime } from '../utils';\r\n\r\nconst Question = ({ data, onAnswerUpdate, numberOfQuestions, activeQuestion, onSetActiveQuestion, onSetStep,time }) => {\r\n    const [selected, setSelected] = useState('');\r\n    const [error, setError] = useState('');\r\n    const radiosWrapper = useRef();\r\n  \r\n    useEffect(() => {\r\n      const findCheckedInput = radiosWrapper.current.querySelector('input:checked');\r\n      if(findCheckedInput) {\r\n        findCheckedInput.checked = false;\r\n      }\r\n    }, [data]);\r\n  \r\n    const changeHandler = (e) => {\r\n      setSelected(e.target.value);\r\n      if(error) {\r\n        setError('');\r\n      }\r\n    }\r\n    \r\n    const nextClickHandler = (e) => {\r\n      if(selected === '') {\r\n        return setError('Please select one option!');\r\n      }\r\n      onAnswerUpdate(prevState => [...prevState, { q: data.question, a: selected }]);\r\n      setSelected('');\r\n      if(activeQuestion < numberOfQuestions - 1) {\r\n        onSetActiveQuestion(activeQuestion + 1);\r\n      }\r\n      else\r\n      {\r\n        onSetStep(3);\r\n      }\r\n      time=0;\r\n    }\r\n\r\n    return(\r\n        <div className=\"Home-container\">\r\n          {formatTime(time)}\r\n            <div>\r\n                <h2>{data.question}</h2>\r\n                <div className=\"control\" ref={radiosWrapper}>\r\n                {data.choices.map((choice, i) => (\r\n                    <label className=\"radio \" key={i}>\r\n                        <input type=\"radio\" name=\"answer\" value={choice} onChange={changeHandler} />\r\n                        {choice}\r\n                    </label>\r\n                ))}\r\n                <button className=\"Home-btn\" onClick={nextClickHandler}>Next</button>\r\n          </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Question;","import React, { useEffect, useState } from 'react';\r\n\r\nimport { formatTime } from '../utils';\r\n\r\nconst End = ({ results, data, onReset, onAnswersCheck, time }) => {\r\n  const [correctAnswers, setCorrectAnswers] = useState(0);\r\n\r\n  useEffect(() => {\r\n    let correct = 0;\r\n    results.forEach((result, index) => {\r\n      if(result.a === data[index].answer) {\r\n        correct++;\r\n      }\r\n    });\r\n    setCorrectAnswers(correct);\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  return(\r\n    <>\r\n    <div className=\"Home-container\">\r\n        <div>\r\n            <h3>Your results</h3>\r\n          <p>{correctAnswers} of {data.length}</p>\r\n          <p><strong>{Math.floor((correctAnswers / data.length) * 100)}%</strong></p>\r\n          <p><strong>Your time:</strong> {formatTime(time)}</p>\r\n          <button className=\"Home-btn\" onClick={onReset}>Try again</button>\r\n        </div>\r\n    </div>\r\n    </>\r\n\r\n  );\r\n}\r\n\r\nexport default End;","import React, { useState, useEffect } from 'react';\nimport Start from './components/Start';\nimport Question from './components/Question';\nimport quizData from './data/Quize.json';\nimport End from './components/End';\n\nfunction App() {\n\n  const [step, setStep] = useState(1);\n  const [activeQuestion, setActiveQuestion] = useState(0);\n  const [answers, setAnswers] = useState([]);\n  const [showModal, setShowModal] = useState(false);\n  const [time, setTime] = useState(0);\n\n  let interval;\n  useEffect(() => {\n    if(step === 3) {\n      clearInterval(interval);\n    }\n  }, [step]);\n\n  const quizStartHandler = () => {\n    setStep(2);\n    interval = setInterval(() => {\n      setTime(prevTime => prevTime + 1);\n    }, 1000);\n  }\n\n  const resetClickHandler = () => {\n    setActiveQuestion(0);\n    setAnswers([]);\n    setStep(2);\n    setTime(0);\n    interval = setInterval(() => {\n      setTime(prevTime => prevTime + 1);\n    }, 1000);\n  }\n\n  return (\n    <>\n     {step === 1 && <Start onQuizStart={quizStartHandler} />}\n      {step === 2 && <Question \n        data={quizData.data[activeQuestion]}\n        onAnswerUpdate={setAnswers}\n        numberOfQuestions={quizData.data.length}\n        activeQuestion={activeQuestion}\n        onSetActiveQuestion={setActiveQuestion}\n        onSetStep={setStep}\n      />}\n      {step === 3 && <End \n        results={answers}\n        data={quizData.data}\n        onReset={resetClickHandler}\n        onAnswersCheck={() => setShowModal(true)}\n        time={time}\n      />}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}